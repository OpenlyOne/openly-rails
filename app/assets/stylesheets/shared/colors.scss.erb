// Set up colors to be used in application

// Use Americanized spelling for colors (gray instead of grey)
.gray {
  // scss-lint:disable PlaceholderInExtend
  @extend .grey;
}

.blue-gray {
  // scss-lint:disable PlaceholderInExtend
  @extend .blue-grey;
}

.gray-text {
  // scss-lint:disable PlaceholderInExtend
  @extend .grey-text;
}

.blue-gray-text {
  // scss-lint:disable PlaceholderInExtend
  @extend .blue-grey-text;
}

// Also support gray and blue-gray in $colors variable
$colors: map-merge($colors, ('gray': map-get($colors, 'grey')));
$colors: map-merge($colors, ('blue-gray': map-get($colors, 'blue-grey')));
$colors: map-merge($colors, ('black': ('base': #000)));
$colors: map-merge($colors, ('white': ('base': #fff)));

// Generate our color schemes
@mixin define-classes-based-on-color-scheme($color) {
  // primary-color: applies main color to an element as background-color
  .primary-color {
    // scss-lint:disable ImportantRule
    background-color: $color !important;
  }
}

@mixin define-classes-based-on-font-color($color) {
  // primary-color-text: applies font color to an element as text-color
  .primary-color-text {
    // scss-lint:disable ImportantRule
    color: $color !important;
  }
}

// set up color schemes (we will create one for each scheme defined in
// app/models/color.rb)
.color-scheme {

  <% Color.options.each do |color| %>
  <% base, modifier = color.split(' ') %>
  &.primary-<%= base %>.primary-<%= modifier %> {
    @include define-classes-based-on-color-scheme(
      color('<%= base %>', '<%= modifier %>')
    );
  }

  <% end %>

  // map black text
  &.primary-black-text {
    @include define-classes-based-on-font-color(color('shades', 'black'));
  }

  // map white text
  &.primary-white-text {
    @include define-classes-based-on-font-color(color('shades', 'white'));
  }
}

// scss-lint:disable MergeableSelector
.color-scheme {
  // NAVIGATION: Use light seam if scheme is 'black base'
  &.primary-black.primary-base nav {
    @include light-seam(bottom);
  }

  // CHANGED: Do not invert color of Openly bee logo
  // NAVIGATION: Invert color of logo if white text
  // &.primary-white-text .brand-logo > img {
  //   filter: invert(1);
  // }

  // NAVIGATION: Use light overlay if black text
  &.primary-black-text .nav-overlay {
    background-color: $light-shadow;
  }
}
// scss-lint:enable MergeableSelector

// TABS: Inherit color
.tab {

  // Reduce opacity because we cannot reduce color alpha as in
  // original implementation
  a,
  &.disabled a,
  &.disabled a:hover {
    opacity: .7;
  }

  a {
    // scss-lint:disable ImportantRule
    color: inherit !important;

    // add transition to opacity (instead of color)
    transition: opacity .28s ease;

    &:hover,
    &.active {
      opacity: 1;
    }
  }
}
