// add support for gray and blue gray
$colors: map-merge($colors, ('gray': map-get($colors, 'grey')));
$colors: map-merge($colors, ('blue-gray': map-get($colors, 'blue-grey')));

@mixin define-classes-based-on-color-scheme($color) {
  // primary-color: applies main color to an element as background-color
  .primary-color {
    // scss-lint:disable ImportantRule
    background-color: $color !important;
  }
}

@mixin define-classes-based-on-font-color($color) {
  // primary-color-text: applies font color to an element as text-color
  .primary-color-text {
    // scss-lint:disable ImportantRule
    color: $color !important;
  }
}

// set up color schemes (we will map base colors only)
.color-scheme {

  @each $color-name, $color in $colors {
    @each $color-type, $color-value in $color {
      @if $color-type == 'base' {
        &.primary-#{$color-name} {
          @include define-classes-based-on-color-scheme($color-value);
        }
      }
    }
  }

  // map black text
  &.primary-black-text {
    @include define-classes-based-on-font-color(color('shades', 'black'));
  }

  // map white text
  &.primary-white-text {
    @include define-classes-based-on-font-color(color('shades', 'white'));
  }
}

// NAVIGATION: Invert color of logo if white text
// scss-lint:disable MergeableSelector
.color-scheme.primary-white-text .brand-logo > img {
  filter: invert(1);
}
